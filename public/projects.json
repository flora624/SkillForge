[
  {
    "id": 1,
    "title": "Design an A/B Testing System for Streaming Service Thumbnails",
    "domain": "System Design & Product",
    "difficulty": "Advanced",
    "problemStatement": "Netflix famously discovered that the artwork and thumbnails shown to users have a massive impact on what they choose to watch. They needed a scalable system to A/B test thousands of image variations across millions of users to find the most effective artwork for each title. Your task is to design a simplified version of such a system for a new streaming service.",
    "objectives": ["Design the data schema for storing titles, image assets, test variants, and user interaction results.", "Create a high-level architectural diagram showing how a user request for a homepage would resolve to show a specific thumbnail variant.", "Define the API endpoint that would record a user's click/play action on a tested thumbnail."],
    "deliverables": ["A system design document (PDF) explaining your architecture, data models, and API design.", "A sequence diagram illustrating the A/B test serving logic."],
    "skills": ["System Design", "API Design", "Data Modeling", "A/B Testing", "Product Thinking"],
    "resources": [
      { "title": "Source: The Netflix Tech Blog on Artwork Personalization", "link": "https://netflixtechblog.com/artwork-personalization-c589f074ad76" },
      { "title": "System Design Basics: A/B Testing", "link": "https://www.youtube.com/watch?v=fkA9kIqGafA" },
      { "title": "Miro - Free Diagramming Tool", "link": "https://miro.com/" }
    ],
    "solution": {
      "approach": "1. **Data Model:** Design tables/collections for `Users`, `Titles`, `Images` (with a foreign key to Title), `AB_Tests` (defining which images are in a test for a title), and `Impressions` (logging which user saw which image and if they clicked). \n2. **Architecture:** A common approach is a microservice architecture. A 'Personalization Service' would be responsible for the logic. When a user requests their homepage, the 'Homepage Service' asks the 'Personalization Service', 'Which image should I show User_123 for Title_ABC?' \n3. **Logic:** The Personalization Service checks if the user is already part of an active test for that title. If so, it serves the same variant. If not, it assigns them to a variant (e.g., randomly, with a 50/50 split) and records the assignment. \n4. **API:** The logging API endpoint could be `POST /v1/events/impression` with a body like `{ userId: '123', imageId: 'xyz', titleId: 'abc', event: 'play' }`.",
      "keyTakeaways": "This project teaches how to think about scalable, data-driven product features. It's not just about code, but about designing a system that can answer a business question ('which image works best?') reliably and at scale."
    },
    "resumeText": "Designed a scalable A/B testing system for personalized content, inspired by Netflix's engineering challenges, including data schema design, high-level architecture, and API endpoint definitions."
  },
  {
    "id": 2,
    "title": "Build a 'Discover' Feature Recommendation Engine",
    "domain": "Data Science",
    "difficulty": "Advanced",
    "problemStatement": "Spotify's 'Discover Weekly' is a legendary feature that introduced millions of users to new music. The core problem was analyzing user listening history to recommend new songs they would love but haven't heard yet. Your task is to build a simplified collaborative filtering recommendation engine using a sample dataset.",
    "objectives": ["Pre-process a user-item interaction dataset (e.g., user-song plays).", "Build a user-item matrix to represent user preferences.", "Implement a simple collaborative filtering algorithm (e.g., using nearest neighbors or matrix factorization) to generate song recommendations for a given user."],
    "deliverables": ["A complete, well-commented Jupyter Notebook detailing your data processing, model building, and recommendation logic.", "A function that takes a `userId` and returns a list of 10 recommended `songIds`."],
    "skills": ["Machine Learning", "Recommendation Systems", "Collaborative Filtering", "Pandas", "Scikit-Learn"],
    "resources": [
      { "title": "Source: How Spotify's Discover Weekly Works", "link": "https://medium.com/s/story/spotifys-discover-weekly-how-machine-learning-finds-your-new-music-19a41ab76efe" },
      { "title": "Music Recommendation Dataset (Kaggle)", "link": "https://www.kaggle.com/c/kkbox-music-recommendation-challenge/data" },
      { "title": "Guide to Collaborative Filtering", "link": "https://realpython.com/build-recommendation-engine-collaborative-filtering/" }
    ],
    "solution": {
      "approach": "1. **Data Prep:** Load the user-song data. Create a user-item matrix where rows are users, columns are songs, and values are play counts (or 1 for played, 0 for not). This matrix will be very sparse. \n2. **Similarity Model (User-based):** For a target user, calculate a similarity score (e.g., cosine similarity) between them and all other users. Find the 'K' most similar users (their 'nearest neighbors'). \n3. **Recommendation:** Look at the songs that these similar users have listened to but the target user has not. Rank these songs based on how many of the similar users have listened to them, and recommend the top N songs. \n4. **Alternative (Item-based):** An alternative is to calculate the similarity between songs instead of users. If a user likes Song A, recommend songs that are most similar to Song A.",
      "keyTakeaways": "This project dives into the core of modern personalization. It shows how patterns in data can be used to create a delightful and highly effective user experience, driving engagement and retention."
    },
    "resumeText": "Developed a collaborative filtering recommendation engine in Python (Pandas, Scikit-Learn) to generate personalized song recommendations, mirroring the principles behind Spotify's 'Discover' features."
  },
  {
    "id": 3,
    "title": "Design a Frictionless Developer Checkout Flow",
    "domain": "UI/UX Design",
    "difficulty": "Intermediate",
    "problemStatement": "Stripe revolutionized online payments by focusing obsessively on developer experience and creating a simple, elegant, and easy-to-integrate checkout process. Older payment systems were notoriously complex. Your task is to design a modern, frictionless two-page checkout flow for a new payment processor aiming to compete with Stripe.",
    "objectives": ["Design a checkout form that is intuitive and minimizes user input.", "Design a 'success' page that clearly confirms the transaction and provides necessary details.", "Ensure the design is clean, trustworthy, and visually appealing to build user confidence."],
    "deliverables": ["High-fidelity mockups for the 'Payment' screen and the 'Confirmation' screen.", "A clickable prototype in Figma or Adobe XD showing the flow from entering payment details to seeing the success message.", "A brief document justifying your design choices (e.g., why you chose a single-column layout)."],
    "skills": ["UI Design", "UX Design", "Prototyping", "Figma/Adobe XD", "User Empathy"],
    "resources": [
      { "title": "Source: Stripe's Design and Documentation (The Gold Standard)", "link": "https://stripe.com/docs/checkout/quickstart" },
      { "title": "Baymard Institute - Checkout Form Best Practices", "link": "https://baymard.com/blog/checkout-flow-best-practices" },
      { "title": "Figma - Free UI/UX Design Tool", "link": "https://www.figma.com/" }
    ],
    "solution": {
      "approach": "1. **Minimize Fields:** Only ask for what is absolutely necessary. Combine 'First Name' and 'Last Name' into a single 'Full Name' field. Use a single 'Card Number' field that automatically detects the card type (Visa, Mastercard, etc.) and formats the input. \n2. **Clear Visual Hierarchy:** Use size, color, and spacing to guide the user's eye to the most important elements, like the 'Pay' button. The price should be the most prominent element on the page. \n3. **Inline Validation:** Provide real-time feedback. If a user enters an invalid credit card number, show a gentle error message immediately, don't wait for them to click 'Pay'. \n4. **Trust Signals:** Include security logos (e.g., a lock icon), clear branding, and professional typography to make the user feel safe providing their payment information.",
      "keyTakeaways": "This project teaches that great design is about removing friction. By focusing on simplicity, clarity, and user trust, you can turn a typically stressful process (paying for something) into a smooth and positive experience."
    },
    "resumeText": "Designed a high-fidelity, two-page payment checkout flow focused on minimizing user friction and building trust, applying UX principles inspired by Stripe's industry-leading developer experience."
  },
  {
    "id": 4,
    "title": "Develop a Trust & Safety Program for a Marketplace",
    "domain": "Business Strategy & Marketing",
    "difficulty": "Intermediate",
    "problemStatement": "In its early days, Airbnb faced a massive challenge: how to make people trust staying in a stranger's home. They had to build a system of trust from scratch. Your task is to develop a foundational 'Trust & Safety' program for a new peer-to-peer marketplace (e.g., a platform for renting out high-end camera equipment).",
    "objectives": ["Outline a user verification process.", "Design a two-way review and rating system.", "Propose a 'Host Guarantee' or insurance policy to protect lenders.", "Create a marketing plan to communicate these trust features to new users."],
    "deliverables": ["A 3-page strategy document (PDF) detailing the verification, review, and guarantee programs.", "A one-page marketing brief outlining the messaging and channels for promoting the trust features."],
    "skills": ["Business Strategy", "Product Marketing", "User Trust", "Risk Management"],
    "resources": [
      { "title": "Source: How Airbnb Designed for Trust", "link": "https://www.fastcompany.com/3043212/how-airbnb-and-eames-democratized-design" },
      { "title": "HBR - Building a Trust-Based Marketplace", "link": "https://hbr.org/2012/10/the-four-things-you-need-to-b" },
      { "title": "HubSpot - Creating a Marketing Plan", "link": "https://blog.hubspot.com/marketing/marketing-plan-template-generator" }
    ],
    "solution": {
      "approach": "1. **Multi-layered Verification:** Propose a system where users can earn a 'Verified' badge. Steps could include email verification (basic), phone number verification, government ID upload (advanced), and optional social media profile linking. \n2. **Two-Way Reviews:** Both the equipment owner (lender) and the renter should review each other after a transaction. This incentivizes good behavior on both sides. Reviews should be 'blind'—neither party sees the other's review until both have submitted theirs, preventing retaliatory feedback. \n3. **The Guarantee:** Propose a simple insurance-like program. E.g., 'The TerraLens Guarantee covers up to $1,000 in damages.' This single feature can overcome a major objection for new lenders. \n4. **Marketing:** The messaging should be central to the brand. Homepage slogan: 'Rent with Confidence.' Marketing emails should highlight the verification process and guarantee. Social proof (testimonials from happy users) should be featured prominently.",
      "keyTakeaways": "For any marketplace platform, trust is the product. This project teaches how to think systematically about building trust through product features, policies, and marketing, which is essential for facilitating real-world interactions between users."
    },
    "resumeText": "Developed a comprehensive Trust & Safety program for a conceptual peer-to-peer marketplace, outlining strategies for user verification, a two-way review system, and a host guarantee inspired by Airbnb's foundational business challenges."
  }
]